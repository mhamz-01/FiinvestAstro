<script is:inline>
    document.addEventListener('DOMContentLoaded', function () {
      const contentContainer = document.getElementById('locationContent');
      const imageContainer = document.getElementById('locationImage');
      const indicators = document.querySelectorAll('[data-location]');
      const pauseButton = document.getElementById('pauseButton');
      const prevButton = document.getElementById('prevLocation');
      const nextButton = document.getElementById('nextLocation');
      const pauseIcon = document.getElementById('pauseIcon');
      const playIcon = document.getElementById('playIcon');
  
      let currentLocation = 0;
      let isPlaying = true;
      let intervalId = null;
  
      // Location data
      const locations = [
        {
          address: "2nd Floor Office 216A,<br/>Block B, Sami Tower,<br/>Near Hayatabad Toll Plaza Ring Road,<br/>Peshawar, Pakistan",
          phone: "+923439643736",
          hours: "Monday - Friday: 9:00 AM - 5:00 PM<br/>Saturday - Sunday: Closed",
          image: "https://ik.imagekit.io/a6bzcaqbn/images/PeshawarLocation.png?updatedAt=1749752502078"
        },
        {
          address: "4th Floor, Cabin 18,<br/>Executive Centre,<br/>I8 Markaz,<br/>Islamabad, Pakistan",
          phone: "+923439643736",
          hours: "Monday - Friday: 9:00 AM - 5:00 PM<br/>Saturday - Sunday: Closed",
          image: "https://ik.imagekit.io/a6bzcaqbn/images/islamabadlocation.png?updatedAt=1749752502129"
        },
        {
          address: "Lahore Office<br/>Coming Soon",
          phone: "To be announced",
          hours: "Monday - Friday: 9:00 AM - 5:00 PM<br/>Saturday - Sunday: Closed",
          image: "https://ik.imagekit.io/a6bzcaqbn/images/lahoreComingSoon.jpg?updatedAt=1749752502168"
        }
      ];
  
      function updateLocation(index) {
        contentContainer.style.opacity = '0';
        imageContainer.style.opacity = '0';
  
        setTimeout(() => {
          contentContainer.innerHTML = `
            <div class="space-y-8">
              <div class="flex items-start space-x-6">
                <div class="flex-shrink-0 p-3 bg-[#DBAB23]/10 rounded-xl">
                  <svg class="w-8 h-8 text-[#DBAB23]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                  </svg>
                </div>
                <div>
                  <h3 class="text-xl font-bold text-white mb-2">Office Address</h3>
                  <p class="text-white/70">${locations[index].address}</p>
                </div>
              </div>
  
              <div class="flex items-start space-x-6">
                <div class="flex-shrink-0 p-3 bg-[#DBAB23]/10 rounded-xl">
                  <svg class="w-8 h-8 text-[#DBAB23]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                  </svg>
                </div>
                <div>
                  <h3 class="text-xl font-bold text-white mb-2">Contact Number</h3>
                  <p class="text-white/70">${locations[index].phone}</p>
                </div>
              </div>
  
              <div class="flex items-start space-x-6">
                <div class="flex-shrink-0 p-3 bg-[#DBAB23]/10 rounded-xl">
                  <svg class="w-8 h-8 text-[#DBAB23]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                  </svg>
                </div>
                <div>
                  <h3 class="text-xl font-bold text-white mb-2">Office Hours</h3>
                  <p class="text-white/70">${locations[index].hours}</p>
                </div>
              </div>
            </div>
          `;
  
          imageContainer.innerHTML = `
            <img loading="lazy" src="${locations[index].image}" alt="Office Location" class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110">
          `;
  
          indicators.forEach((indicator, i) => {
            indicator.className = `w-16 h-1 rounded-full transition-all duration-300 ${i === index ? 'bg-[#DBAB23]' : 'bg-white/30'}`;
          });
  
          contentContainer.style.opacity = '1';
          imageContainer.style.opacity = '1';
        }, 300);
      }
  
      function startAutoRotation() {
        return setInterval(() => {
          if (isPlaying) {
            currentLocation = (currentLocation + 1) % locations.length;
            updateLocation(currentLocation);
          }
        }, 5000);
      }
  
      function updatePauseButton() {
        pauseIcon.classList.toggle('hidden', !isPlaying);
        playIcon.classList.toggle('hidden', isPlaying);
        pauseButton.querySelector('span:last-child').textContent = isPlaying ? 'Pause' : 'Play';
      }
  
      // Event Listeners
      pauseButton.addEventListener('click', () => {
        isPlaying = !isPlaying;
        updatePauseButton();
        if (isPlaying) {
          intervalId = startAutoRotation();
        } else {
          clearInterval(intervalId);
        }
      });
  
      prevButton.addEventListener('click', () => {
        clearInterval(intervalId);
        currentLocation = (currentLocation - 1 + locations.length) % locations.length;
        updateLocation(currentLocation);
        if (isPlaying) intervalId = startAutoRotation();
      });
  
      nextButton.addEventListener('click', () => {
        clearInterval(intervalId);
        currentLocation = (currentLocation + 1) % locations.length;
        updateLocation(currentLocation);
        if (isPlaying) intervalId = startAutoRotation();
      });
  
      indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => {
          clearInterval(intervalId);
          currentLocation = index;
          updateLocation(currentLocation);
          if (isPlaying) intervalId = startAutoRotation();
        });
      });
  
      // Initialize
      updateLocation(0);
      updatePauseButton();
      intervalId = startAutoRotation();
    });
  </script>